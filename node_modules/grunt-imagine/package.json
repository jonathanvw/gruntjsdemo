{
  "name": "grunt-imagine",
  "description": "Grunt tasks for optimizing, inlining & spriting images",
  "version": "0.3.3",
  "homepage": "http://asciidisco.github.com/grunt-imagine/",
  "author": {
    "name": "asciidisco",
    "email": "public@asciidisco.com",
    "url": "http://www.asciidisco.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/asciidisco/grunt-imagine.git"
  },
  "bugs": {
    "url": "https://github.com/asciidisco/grunt-imagine/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://asciidisco.github.com/grunt-imagine//blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "bin": {
    "grunt-imagine": "bin/grunt-imagine"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "grunt test --verbose"
  },
  "dependencies": {
    "grunt": "~0.4.1",
    "which": "~1.0.5",
    "lodash": "~2.2.1",
    "mime": "~1.2.11",
    "async": "~0.2.9",
    "phantomjs": "~1.9.2-2",
    "cheerio": "~0.12.4"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.7.0",
    "grunt-contrib-nodeunit": "~0.2.2",
    "grunt-contrib-watch": "~0.5.3"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-imagine\r\n\r\nUse [@cowboys](https://github.com/cowboy) js based optimizer [grunt](https://github.com/gruntjs/grunt) to optimize (and or inline) your projects image resources.\r\n\r\n[![Build Status](https://secure.travis-ci.org/asciidisco/grunt-imagine.png?branch=master)](http://travis-ci.org/asciidisco/grunt-imagine)\r\n\r\n## Getting Started\r\n\r\n### Plugin installation\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-imagine`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile.\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-imagine');\r\n```\r\n\r\n### Installation of third party tools\r\nIf you want to use the pngmin, jpgmin, gifmin or pngnq tasks,\r\nyou need to have some third party tools installed & in your global PATH:\r\n\r\nIt is enough if you have one tool per task installed,\r\nbut if you provide more of them, grunt-imagine will recognize that\r\nand will try to use them, if they´ll help to shrink the filesize.\r\n\r\nNote: I will add more tools to the chain in the future,\r\nif you would like to see a tool in image, ping me.\r\n\r\n### PNG tools:\r\n+ [pngcrush](http://pmt.sourceforge.net/pngcrush/)\r\n+ [pngout Windows](http://advsys.net/ken/utils.htm)\r\n+ [pngout *nix](http://www.jonof.id.au/kenutils)\r\n+ [optipng](http://optipng.sourceforge.net/)\r\n+ [cryopng](http://encode.ru/threads/1260-CryoPNG-short-introduction)\r\n+ [advpng](http://advancemame.sourceforge.net/comp-download.html)\r\n+ [huffmix](http://frdx.free.fr/huffmix/)\r\n\r\n### GIF tools:\r\n+ [gifsicle](http://www.lcdf.org/gifsicle/)\r\n\r\n### JPEG tools:\r\n+ [jpegoptim](https://github.com/glennr/jpegoptim)\r\n+ [jpegtran](http://jpegclub.org/jpegtran/)\r\n+ [jpegrescan](https://github.com/kud/jpegrescan)\r\n\r\n### PNGQUANT tools:\r\n+ [pngnq](http://pngnq.sourceforge.net/)\r\n\r\n### Resources\r\n+ [grunt](https://github.com/gruntjs/grunt)\r\n+ [Getting started](https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md)\r\n\r\n## Documentation\r\n\r\n### pngmin task\r\nIf you would like to shrink the size (lossless) of your *.png files,\r\nset up a src description, where to find your original *.png files\r\nand a directory where you would like to store your optimized files.\r\n\r\nThe task will take the original directory setup from your src directories,\r\nand will copy them over (even for subdirs).\r\n\r\nWarning!\r\nIf the dest property is set equally to your src directory, imagine will override your files!\r\n\r\n```javascript\r\npngmin: {\r\n  src: [\r\n    'src/*.png',\r\n    'src/img/*.png'\r\n  ],\r\n  dest: 'build'\r\n}\r\n```\r\n\r\n### gifmin task\r\nIf you would like to shrink the size (lossless) of your *.gif files,\r\nset up a src description, where to find your original *.gif files\r\nand a directory where you would like to store your optimized files.\r\n\r\nThe task will take the original directory setup from your src directories,\r\nand will copy them over (even for subdirs).\r\n\r\nWarning!\r\nIf the dest property is set equally to your src directory, imagine will override your files!\r\n\r\n```javascript\r\ngifmin: {\r\n  src: ['src/**/*.gif'],\r\n  dest: 'build'\r\n}\r\n```\r\n\r\n### jpgmin task\r\nIf you would like to shrink the size (lossless) of your *.jpg files,\r\nset up a src description, where to find your original *.jpg files\r\nand a directory where you would like to store your optimized files.\r\n\r\nThe task will take the original directory setup from your src directories,\r\nand will copy them over (even for subdirs).\r\n\r\nWarning!\r\nIf the dest property is set equally to your src directory, imagine will override your files!\r\n\r\n```javascript\r\njpgmin: {\r\n  src: ['src/**/*.jpg'],\r\n  dest: 'build'\r\n}\r\n```\r\n\r\nIf you would like to use lossy compression via `jpegoptim`'s `-m` flag, you can \r\nadd a `quality` configuration option:\r\n\r\n```javascript\r\njpgmin: {\r\n  src: ['src/**/*.jpg'],\r\n  dest: 'build',\r\n  quality: 80 // use lossy JPEG compression at 80% quality\r\n}\r\n```\r\n\r\n### pngnq task\r\nIf you would like to quantizize your PNG images in RGBA format,\r\nset up a src description, where to find your original *.png files\r\nand a directory where you would like to store your optimized files.\r\n\r\nThe task will take the original directory setup from your src directories,\r\nand will copy them over (even for subdirs).\r\n\r\nWarning!\r\nIf the dest property is set equally to your src directory, imagine will override your files!\r\n\r\n```javascript\r\npngnq: {\r\n  src: ['src/**/icons*.png'],\r\n  dest: 'build'\r\n}\r\n```\r\n\r\n### inlineImg task\r\nIf you would like to inline your images (data:uri/base64) in your *.css or *.png files,\r\nyou can use the inlineImg task, just add a src, where imagine can\r\nfind your *.css and/or *.html files.\r\n\r\nIf you use absolute paths, use the base property to tell imagine, where\r\nit can find your images.\r\n\r\nIf you set the ie8 flag to true, only images smaller than 32kb will be inlined.\r\n\r\n```javascript\r\ninlineImg: {\r\n  src: ['src/**/*.css', 'src/**/*.html'],\r\n  ie8: true,\r\n  base: 'build/img',\r\n  dest: 'build'\r\n}\r\n```\r\n\r\n### sprites (multi)task\r\nImagine provides the ability to generate sprite maps and the\r\ncorresponding css, scss, sass, less or stylus files. At the moment, only *.png files can be processed.\r\n\r\n\r\n```javascript\r\n  sprites: {\r\n      icons36: {\r\n          src: ['src/img/icons36/*.png'],\r\n          css: 'src/css/icons36.css',\r\n          map: 'src/img/icons36.png'\r\n      }\r\n  }\r\n```\r\n\r\nThis configuration will generate an image named icons36.png in the\r\n'src/img' folder, which contains all of the *.png images found in the\r\n'src/img/icons36/' folder.\r\n\r\nGiven that two matching images were found in the'src/img/icons36/' folder,\r\nnamed 'MyImage1.png' and 'MyImage2.png',\r\nthe generated css file would look like this:\r\n\r\n```css\r\n.MyImage1, .MyImage2 {\r\n    background: url(\"../img/icon36.png\") no-repeat;\r\n}\r\n\r\n.MyImage1 {\r\n    background-position: 0 -432px;\r\n}\r\n\r\n.MyImage2 {\r\n    background-position: 0 -396px;\r\n}\r\n\r\n```\r\n\r\nThis task doesn´t depend on any external libraries, except for\r\nPhantomJS, which the most of you should have installed if you´re using grunt.\r\n\r\n#### options\r\n\r\n##### margin\r\n\r\nThe images are be sprited vertically, so you might need to set\r\nup some margin to give´em some space:\r\n\r\n```javascript\r\n  sprites: {\r\n      icons36: {\r\n          src: ['src/img/icons36/*.png'],\r\n          css: 'src/css/icons36.css',\r\n          map: 'src/img/icons36.png',\r\n          margin: 15\r\n      }\r\n  }\r\n```\r\n\r\nNow you´re images will be places with 15 px of space between them.\r\n\r\n##### classPrefix\r\n\r\nYou can add a prefix to every class by specifying this option\r\n\r\n```javascript\r\n  sprites: {\r\n      icons36: {\r\n          src: ['src/img/icons36/*.png'],\r\n          css: 'src/css/icons36.css',\r\n          map: 'src/img/icons36.png',\r\n          classPrefix: 'Icon'\r\n      }\r\n  }\r\n```\r\n\r\nwhich would generate something like this:\r\n\r\n```css\r\n.Icon-MyImage1, .Icon-MyImage2 {\r\n    background: url(\"../img/icon36.png\") no-repeat;\r\n}\r\n\r\n.Icon-MyImage1 {\r\n    background-position: 0 -432px;\r\n}\r\n\r\n.Icon-MyImage2 {\r\n    background-position: 0 -396px;\r\n}\r\n\r\n```\r\n\r\n##### output\r\n\r\nThe task has the ability to output the CSS portion in multiple format. The default format is straight CSS. However you can choose to output to SASS, SCSS, LESS or Stylus placeholders to include to your stylesheets. The possible values for this options are `css`, `scss`, `sass`, `less`, `stylus`.\r\n\r\nFor example, the following configuration:\r\n\r\n```javascript\r\n  sprites: {\r\n      icons36: {\r\n          src: ['src/img/icons36/*.png'],\r\n          css: 'src/css/icons36.css',\r\n          map: 'src/img/icons36.png',\r\n          output: 'scss'\r\n      }\r\n  }\r\n```\r\n\r\nwould generate something like this:\r\n\r\n```css\r\n%icons36 {\r\n    background: url(\"../img/icon36.png\") no-repeat;\r\n}\r\n\r\n%Icon-MyImage1 {\r\n    @extend %icons36;\r\n    background-position: 0 -432px;\r\n}\r\n\r\n%Icon-MyImage2 {\r\n    @extend %icons36;\r\n    background-position: 0 -396px;\r\n}\r\n\r\n```\r\n\r\n## Future (TODO)\r\n* Better documentation (Near future!)\r\n* JS only PNG optimizing\r\n* More JPG, PNG, GIF tools (ping me, if you knew good ones)\r\n* Using remote services alternativly (smush.it, tinypng.org)\r\n* GIF to PNG conversion (if smaller)\r\n\r\n## Release History\r\n\r\n\r\n### 0.3.3\r\n+ Added Stylus ouput option to sprites task [Thx to @alpadev] (https://github.com/alpadev)\r\n - 96cc7cda updates: README.md [@alpadev]\r\n - 894a7022\tadds: stylus generator [@alpadev]\r\n - c4554cbf\tadds: stylus test case [@alpadev]\r\n - 84d20850\tDon't output CSS unit for value 0 [@LaurentGoderre]\r\n\r\n### 0.3.2\r\n+ Replaced the jQuery dependency with Cheerio [Thx to @LaurentGoderre] (https://github.com/LaurentGoderre)\r\n - 3fae23c0 Added verbose logging to min tasks as per #47 [@LaurentGoderre]\r\n - daa8e8b7 Replaced the jQuery dependency with Cheerio to solve #28 [@LaurentGoderre]\r\n - b65645c6 Fixed an async problem with the spriting [@LaurentGoderre]\r\n - f33f2f96 Added the SCSS support documentation [@LaurentGoderre]\r\n - 6c8af22e Fixed the sprites background offset being output in reverse [@LaurentGoderre]\r\n\r\n### 0.3.1\r\n+ Added SCSS, SASS, LESS output option to sprites task [Thx to @LaurentGoderre] (https://github.com/LaurentGoderre)\r\n  - e1699cc2 Converted the image input from command line argument to stdin input [@LaurentGoderre]\r\n  - 6802570c Fix #34 by making the image path relative to the css path [@LaurentGoderre]\r\n  - 526fe343 Added the sass and less example tasks [@LaurentGoderre]\r\n  - 0cf20e7e Added the LESS output functionality [@LaurentGoderre]\r\n  - 9ea3e851 Added SASS support [@LaurentGoderre]\r\n  - a6afbe47 Fixed bug that prevents running multiple sprite targets [@LaurentGoderre]\r\n  - f9d6924e Added the SCSS output option [@LaurentGoderre]\r\n  - 61655844 Create output directories if they don't exist (required for Windows) [@LaurentGoderre]\r\n  - d1c8fbc7 Added npm phantomjs for easier redistribution [@LaurentGoderre]\r\n\r\n### 0.3.0\r\n+ Now works with grunt 0.4.x thanks to the amazing work of [@alpadev](https://github.com/alpadev)\r\n+ Fixes Issue #26, #29, #18, #11 & #19\r\n\r\n### 0.2.2\r\n+ Fixes Issue #5 (Thx to @dominicbarnes)\r\n\r\n### 0.2.1\r\n+ Fixing the travis build\r\n+ Additions from commit #12 (@dethtron5000)\r\n  - the mime type wasn't always properly injected into the data URI\r\n  - the processed file counts weren't updated properly during the same task\r\n\r\n### 0.2.0\r\n+ Added basic spriting feature (for pngs)\r\n\r\n### 0.1.3\r\n+ Added jpegrescan\r\n+ Fixed bug related to issue #6 (output file is bigger than input)\r\n\r\n### 0.1.2\r\n+ Added jpegoptim\r\n+ Fixed gifsicle cmd argument failure\r\n\r\n### 0.1.1\r\n+ Fixed pngnq cmd argument failure\r\n\r\n### 0.1.0\r\n+ Initial Release (jpgmin, gifmin, pngmin, inlineImg, pngnq)\r\n\r\n## License\r\nCopyright (c) 2012 asciidisco\r\nLicensed under the MIT license.\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-imagine@0.3.3",
  "_from": "grunt-imagine@"
}
